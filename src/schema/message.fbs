namespace fbs;

enum BitRange : int { AUTODETECT = 0, UINT8, UINT10, UINT12, UINT16, FLOAT, DIFF, PHASE, PHASE_DIFF }
enum ColorMap : int { DEFAULT = 0, GRAY, DIFF, HSV, BLACKBODY }
enum ArrayDataType : int { FLOAT = 0, UINT16 }
enum TransferFunction : int { NONE = 0, LINEAR, DIFF, DIFF_POS, DIFF_NEG }

table DictEntry {
  key: string;
  val: string;
}

table Array3Meta {
  type:ArrayDataType;
  nx:int;
  ny:int;
  nt:int;
  name:string;
  duration:float; // in seconds
  fps:float; // original framerate
  date:string; // creation date
  comment:string;
  bitrange:BitRange;
  cmap:ColorMap;
  parentName:string;
  alphaTransferFct:TransferFunction;
  metaData:[DictEntry];
}

table Array3MetaFlow {
  nx:int;
  ny:int;
  nt:int;
  name:string;
  parentName:string;
}

// flatbuffers currently restricted to 2GB, so unfortunately we may need to chunk the data
table Array3DataChunkf {
  startidx: uint64;
  data:[float];
}

table Array3DataChunku16 {
  startidx: uint64;
  data:[uint16];
}

table Filepaths {
  file:[string];
}

union Data { Filepaths, Array3Meta, Array3MetaFlow, Array3DataChunkf, Array3DataChunku16 }

table Root {
    data:Data;
}

root_type Root;