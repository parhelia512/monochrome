// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ARRAY3_IPC_H_
#define FLATBUFFERS_GENERATED_ARRAY3_IPC_H_

#include "flatbuffers/flatbuffers.h"

namespace ipc {

struct Array3;

struct Array3 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4,
    VT_NX = 6,
    VT_NY = 8,
    VT_NT = 10,
    VT_NAME = 12
  };
  const flatbuffers::Vector<float> *data() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_DATA);
  }
  int32_t nx() const {
    return GetField<int32_t>(VT_NX, 0);
  }
  int32_t ny() const {
    return GetField<int32_t>(VT_NY, 0);
  }
  int32_t nt() const {
    return GetField<int32_t>(VT_NT, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           VerifyField<int32_t>(verifier, VT_NX) &&
           VerifyField<int32_t>(verifier, VT_NY) &&
           VerifyField<int32_t>(verifier, VT_NT) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct Array3Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<float>> data) {
    fbb_.AddOffset(Array3::VT_DATA, data);
  }
  void add_nx(int32_t nx) {
    fbb_.AddElement<int32_t>(Array3::VT_NX, nx, 0);
  }
  void add_ny(int32_t ny) {
    fbb_.AddElement<int32_t>(Array3::VT_NY, ny, 0);
  }
  void add_nt(int32_t nt) {
    fbb_.AddElement<int32_t>(Array3::VT_NT, nt, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Array3::VT_NAME, name);
  }
  explicit Array3Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Array3Builder &operator=(const Array3Builder &);
  flatbuffers::Offset<Array3> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Array3>(end);
    return o;
  }
};

inline flatbuffers::Offset<Array3> CreateArray3(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<float>> data = 0,
    int32_t nx = 0,
    int32_t ny = 0,
    int32_t nt = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  Array3Builder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_nt(nt);
  builder_.add_ny(ny);
  builder_.add_nx(nx);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<Array3> CreateArray3Direct(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *data = nullptr,
    int32_t nx = 0,
    int32_t ny = 0,
    int32_t nt = 0,
    const char *name = nullptr) {
  auto data__ = data ? _fbb.CreateVector<float>(*data) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return ipc::CreateArray3(
      _fbb,
      data__,
      nx,
      ny,
      nt,
      name__);
}

inline const ipc::Array3 *GetArray3(const void *buf) {
  return flatbuffers::GetRoot<ipc::Array3>(buf);
}

inline const ipc::Array3 *GetSizePrefixedArray3(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ipc::Array3>(buf);
}

inline bool VerifyArray3Buffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ipc::Array3>(nullptr);
}

inline bool VerifySizePrefixedArray3Buffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ipc::Array3>(nullptr);
}

inline void FinishArray3Buffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ipc::Array3> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedArray3Buffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ipc::Array3> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ipc

#endif  // FLATBUFFERS_GENERATED_ARRAY3_IPC_H_
