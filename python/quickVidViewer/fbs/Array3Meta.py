# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers

class Array3Meta(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsArray3Meta(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Array3Meta()
        x.Init(buf, n + offset)
        return x

    # Array3Meta
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Array3Meta
    def Nx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Array3Meta
    def Ny(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Array3Meta
    def Nt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Array3Meta
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Array3MetaStart(builder): builder.StartObject(4)
def Array3MetaAddNx(builder, nx): builder.PrependInt32Slot(0, nx, 0)
def Array3MetaAddNy(builder, ny): builder.PrependInt32Slot(1, ny, 0)
def Array3MetaAddNt(builder, nt): builder.PrependInt32Slot(2, nt, 0)
def Array3MetaAddName(builder, name): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def Array3MetaEnd(builder): return builder.EndObject()
